{"name":"Javascript-oauth2","tagline":"Implementation of OAuth2 in JavaScript using CORS","body":"# javascript-oauth2\r\n\r\nAn implementation of an OAuth2 client in pure JavaScript for web applications,\r\nlicensed under the `3-clause BSD license\r\n<http://opensource.org/licenses/BSD-3-Clause>`_.\r\n\r\n## Overview\r\n\r\nProvides a ``window.oauth2`` object, containing a ``OAuth2XMLHttpRequest``\r\nclass implementing the XMLHttpRequest interface for making OAuth2-protected\r\nrequests.\r\n\r\nHere's the feature list:\r\n\r\n* Transparently handles ``401 Unauthorized`` responses from the remote web service.\r\n* Provides a hook for the application to prompt the user to visit the remote web service to authorize the application.\r\n* Transparently refreshes expired access tokens if a refresh token has previously been provided.\r\n* Wraps a ``XMLHttpRequest`` or ``XDomainRequest`` object, or something that acts like one.\r\n* Supports `Bearer authentication <http://tools.ietf.org/html/rfc6750>`_.\r\n\r\n\r\n## Requirements\r\n\r\nThe remote web service and browser must both support `Cross-Origin Resource\r\nSharing (CORS) <http://www.html5rocks.com/en/tutorials/cors/>`_ on the\r\nprotected resource.\r\n\r\nThe OAuth2 token endpoint should ideally return the following headers with their responses::\r\n\r\n   Access-Control-Allow-Origin: https://your-domain\r\n   Access-Control-Expose-Headers: WWW-Authenticate\r\n\r\nAll is not lost if it doesn't; the library will make intelligent guesses in the dark.\r\n\r\nEach protected resource must support `preflighted requests\r\n<http://www.w3.org/TR/cors/#cross-origin-request-with-preflight-0>`_. Here's an\r\nexample request and response::\r\n\r\n   OPTIONS /protected-resource\r\n   Access-Control-Request-Headers: authorization\r\n   Access-Control-Request-Method: PUT\r\n\r\n   Allow: GET,POST,PUT,DELETE,HEAD\r\n   Access-Control-Allow-Headers: authorization\r\n   Access-Control-Allow-Methods: GET,POST,PUT,DELETE,HEAD\r\n   Access-Control-Allow-Origin: https://your-domain\r\n   Access-Control-Expose-Headers: WWW-Authenticate\r\n\r\nIt may be simplest to mirror the ``Access-Control-Request-Headers`` request\r\nheader to the ``Access-Control-Allow-Headers`` response header, and to\r\nduplicate the ``Allow`` response header (listing all available methods) to the\r\n``Access-Control-Allow-Methods`` response header. Note that the response should\r\nbe a ``200 OK`` or ``204 No Content``, even if a non-OPTIONS request would\r\nreturn ``401 Unauthorized``.\r\n\r\nThe web service must respond to requests requiring authentication with ``401\r\nUnauthorized``, not a redirect to a login form. In time, we should support\r\npre-emptive authorization and checking for login page redirects.\r\n\r\nYou can use ``OAuth2XMLHttpRequest`` with `jQuery <http://jquery.com/>`_ like\r\nthis:\r\n\r\n.. code:: javascript\r\n\r\n   $.ajax('https://example.com/', {\r\n       xhr: oauth2.factory({\r\n           authorizeEndpoint: 'https://example.com/oauth2/authorize',\r\n           tokenEndpoint: 'https://example.com/oauth2/token',\r\n           clientID: 'abcdefgh',\r\n           clientSecret: 'ijklmnop',\r\n           localStoragePrefix: 'oauth2.com.example'\r\n       },\r\n       ...\r\n   });\r\n\r\n\r\n## Browser support\r\n\r\nThis has been tested in:\r\n\r\n* Google Chrome 23\r\n* Firefox 17 (``xhr.getResponseHeader()`` support on CORS requests is broken, but worked around)\r\n* Opera 12\r\n\r\nIt is believed that it should work in:\r\n\r\n* Internet Explorer 8+\r\n\r\nIt does not work in:\r\n\r\n* Android 2.3.3 Browser (intercepts the 401 response before we can do anything about it)\r\n\r\n\r\n## Security considerations\r\n\r\nIf your web application is served over HTTP, an attacker will be able to\r\nintercept the OAuth2 authorization code added to the redirection URI. See\r\n`Section 4.12 of the OAuth 2.0 specification\r\n<http://tools.ietf.org/html/rfc6749#section-4.1.2>`_ for further details. If\r\nyour application is on the public web, an attacker will also have access to the\r\nclient secret, and will be able to combine them to request an access token in\r\norder to imitate the authenticated user. It is strongly RECOMMENDED that your\r\napplication is served over HTTPS.\r\n\r\nIf your application is served from the same domain as untrusted code (such as\r\nwhen using Apache's `UserDir directive\r\n<http://httpd.apache.org/docs/2.4/howto/public_html.html>`_ to host sites at\r\ne.g. ``http://users.example.org/~alice/``), that other code will be able to\r\naccess the OAuth2 access token from local storage, and will be able to make\r\nauthenticated requests. It is strongly RECOMMENDED that all JavaScript on your\r\napplication's domain is trusted.\r\n\r\n\r\n## Example\r\n\r\nHere's a minimal example:\r\n\r\n.. code:: javascript\r\n\r\n   var xhr = new oauth.OAuth2HttpRequest({\r\n       authorizeEndpoint: \"https://example.com/oauth2/authorize\",\r\n       tokenEndpoint: \"https://example.com/oauth2/token\",\r\n       clientID: \"client id\",\r\n       clientSecret: \"client secret\",\r\n       localStoragePrefix: \"oauth2.example.\", // Used for storing credentials in localStorage\r\n       requestAuthorization: function(callback) {\r\n           /* This function will be called if the user is required to visit the *\r\n            * remote web service to authorize the application. If the user      *\r\n            * consents, call callback() to open a pop-up window.                */\r\n\r\n           // Let's use the jQuery UI dialog (http://jqueryui.com/dialog/)\r\n           $('#dialog-authorize').dialog({\r\n               resizable: false,\r\n               width: 500,\r\n               modal: true,\r\n               buttons: {\r\n                   \"Proceed\": function() {\r\n                       $(this).dialog(\"close\"); \r\n                       callback();\r\n                   },\r\n                   \"Cancel\": function() {\r\n                       $(this).dialog(\"close\");\r\n                   }\r\n               }\r\n           }); \r\n       }\r\n   )};\r\n\r\n   xhr.onreadystatechange = function() {\r\n      // get something\r\n   };\r\n   xhr.open('GET', 'https://example.com/protected-resource');\r\n   xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');\r\n   xhr.send('param=value&otherparam=othervalue');\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}